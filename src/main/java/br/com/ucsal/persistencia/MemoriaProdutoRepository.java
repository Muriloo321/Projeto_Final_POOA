package br.com.ucsal.persistencia;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import br.com.ucsal.annotations.Singleton;
import br.com.ucsal.model.Produto;

@Singleton
public class MemoriaProdutoRepository implements ProdutoRepository<Produto, Integer>{

    // Mapa para armazenar os produtos, usando o ID como chave
    private Map<Integer, Produto> produtos = new HashMap<>();
    // Vari√°vel para gerar IDs √∫nicos de forma thread-safe
    private AtomicInteger currentId = new AtomicInteger(1);

    // Inst√¢ncia √∫nica do reposit√≥rio (singleton)
    private static MemoriaProdutoRepository instancia;
    // Flag que controla se a inst√¢ncia foi criada ou n√£o
    private static boolean instanciaCriada = false;

    // Construtor privado para evitar cria√ß√£o de inst√¢ncias fora da classe (Singleton)
    private MemoriaProdutoRepository() {
    }

    // M√©todo para obter a inst√¢ncia √∫nica do reposit√≥rio
    public static synchronized MemoriaProdutoRepository getInstancia() {
        if (instancia == null) {
            // Caso a inst√¢ncia ainda n√£o tenha sido criada, cria uma nova
            instancia = new MemoriaProdutoRepository();
            System.out.println("üöÄ Opa, parece que n√£o tinha uma inst√¢ncia! Criando uma nova inst√¢ncia de MemoriaProdutoRepository...");
            instanciaCriada = true; // Marca que a inst√¢ncia foi criada
        } else if (!instanciaCriada) {
            // Caso a inst√¢ncia j√° tenha sido criada, apenas exibe uma mensagem amig√°vel
            System.out.println("üòâ J√° temos uma inst√¢ncia por aqui! Retornando a inst√¢ncia existente de MemoriaProdutoRepository.");
            instanciaCriada = true; // Marca que a mensagem j√° foi exibida
        }
        return instancia;
    }

    // M√©todo para adicionar um produto ao reposit√≥rio
    @Override
    public void adicionar(Produto entidade) {
        int id = currentId.getAndIncrement(); // Gera um novo ID √∫nico
        entidade.setId(id); // Atribui o ID ao produto
        produtos.put(entidade.getId(), entidade); // Adiciona o produto ao mapa
        System.out.println("üéâ Produto " + entidade.getNome() + " adicionado com sucesso! ID atribu√≠do: " + id);
    }

    // M√©todo para atualizar um produto existente no reposit√≥rio
    @Override
    public void atualizar(Produto entidade) {
        produtos.put(entidade.getId(), entidade); // Atualiza o produto no mapa
        System.out.println("üîÑ Produto " + entidade.getNome() + " atualizado com sucesso!");
    }

    // M√©todo para remover um produto pelo ID
    @Override
    public void remover(Integer id) {
        Produto produtoRemovido = produtos.remove(id); // Remove o produto do mapa
        if (produtoRemovido != null) {
            System.out.println("‚ùå Produto com ID " + id + " removido com sucesso.");
        } else {
            System.out.println("‚ö†Ô∏è N√£o encontramos um produto com o ID " + id + " para remover.");
        }
    }

    // M√©todo para listar todos os produtos no reposit√≥rio
    @Override
    public List<Produto> listar() {
        List<Produto> listaProdutos = new ArrayList<>(produtos.values()); // Cria uma lista com todos os produtos
        System.out.println("üìú Listando todos os produtos...");
        return listaProdutos;
    }

    // M√©todo para obter um produto pelo ID
    @Override
    public Produto obterPorID(Integer id) {
        Produto produto = produtos.get(id); // Busca o produto pelo ID
        if (produto != null) {
            System.out.println("üîç Encontramos o produto com ID " + id + ": " + produto.getNome());
        } else {
            System.out.println("‚ö†Ô∏è N√£o encontramos produto com ID " + id + "...");
        }
        return produto;
    }
}
